#!/bin/bash
# PRISM Framework CLI - Main command-line interface

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# PRISM is installed in ~/.prism
PRISM_ROOT="$HOME/.prism"

# Source libraries
source "${PRISM_ROOT}/lib/prism-core.sh"
source "${PRISM_ROOT}/lib/prism-log.sh"
source "${PRISM_ROOT}/lib/prism-security.sh"

# Version is now inherited from prism-core.sh which reads from VERSION file
readonly PRISM_CLI_VERSION="${PRISM_VERSION}"

# Show help message
show_help() {
    cat << EOF
PRISM Framework v${PRISM_CLI_VERSION}
Persistent Real-time Intelligent System Management

Usage: prism <command> [options]

Commands:
  init [options]       Initialize PRISM in current directory
  context <action>     Manage project context
  session <action>     Manage development sessions
  config <action>      Configure PRISM settings
  update [options]     Update PRISM framework
  doctor              Diagnose and fix issues
  version             Show version information
  help                Show this help message

Init Options:
  --template <name>    Use specific template (default, nodejs, python)
  --force             Overwrite existing configuration
  --minimal           Create minimal setup

Context Actions:
  add [priority] [tags] [name]  Add new context entry
  query <search-term>            Search context files
  export [format] [output]       Export context (markdown/json/yaml)
  update-templates               Update context templates
  load-critical                  Load critical context items

Session Actions:
  start [description]            Start new development session
  status                         Show current session status
  archive                        Archive current session
  restore <session-id>           Restore previous session
  export [format] [session-id]   Export session report
  refresh                        Refresh session context
  clean [days]                   Clean old sessions

Config Actions:
  get <key>          Get configuration value
  set <key> <value>  Set configuration value
  list              List all configuration
  reset             Reset to defaults

Update Options:
  --check            Check for updates only
  --force            Force update even if current
  --beta             Include beta versions

Global Options:
  -v, --verbose      Enable verbose output
  -q, --quiet        Suppress non-error output
  --no-color        Disable colored output
  --log-level <lvl>  Set log level (TRACE,DEBUG,INFO,WARN,ERROR)

Examples:
  prism init                       Initialize in current directory
  prism init --template nodejs     Initialize with Node.js template
  prism context add HIGH security  Add high-priority security context
  prism context query "auth"       Search for authentication context
  prism session start "new feature" Start session for new feature
  prism session status             Check current session status
  prism update --check             Check for updates
  prism doctor                     Diagnose issues

Documentation:
  https://github.com/afiffattouh/hildens-prism

Report Issues:
  https://github.com/afiffattouh/hildens-prism/issues
EOF
}

# Parse global options
parse_global_options() {
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -v|--verbose)
                set_log_level "DEBUG"
                shift
                ;;
            -q|--quiet)
                set_log_level "ERROR"
                shift
                ;;
            --no-color)
                export NO_COLOR=1
                shift
                ;;
            --log-level)
                set_log_level "$2"
                shift 2
                ;;
            *)
                break
                ;;
        esac
    done

    # Return remaining arguments
    echo "$@"
}

# Initialize PRISM in current directory
cmd_init() {
    local template="default"
    local force=false
    local minimal=false

    # Parse options
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --template)
                template="$2"
                shift 2
                ;;
            --force)
                force=true
                shift
                ;;
            --minimal)
                minimal=true
                shift
                ;;
            *)
                log_error "Unknown option: $1"
                return 1
                ;;
        esac
    done

    # Check if already initialized
    if [[ -d .prism ]] && [[ "$force" != "true" ]]; then
        log_warn "PRISM is already initialized in this directory"
        log_info "Use --force to reinitialize"
        return 1
    fi

    log_header "Initializing PRISM Framework"

    # Source initialization script
    source "${PRISM_ROOT}/lib/prism-init.sh"

    # Run initialization
    if prism_init "$template" "$minimal"; then
        log_info "âœ… PRISM initialized successfully!"
        log_info "Next steps:"
        log_info "  1. Review .prism/context/architecture.md"
        log_info "  2. Update CLAUDE.md with project specifics"
        log_info "  3. Run 'prism doctor' to verify setup"
    else
        log_error "Failed to initialize PRISM"
        return 1
    fi
}

# Manage context files
cmd_context() {
    local action=$1
    shift

    source "${PRISM_ROOT}/lib/prism-context.sh"

    case "$action" in
        add)
            local priority=${1:-MEDIUM}
            local tags=${2:-general}
            local component=${3:-"New Component"}
            prism_context_add "$priority" "$tags" "$component"
            ;;
        query)
            local query=$1
            if [[ -z "$query" ]]; then
                log_error "Please specify a search query"
                return 1
            fi
            prism_context_query "$query"
            ;;
        export)
            local format=${1:-markdown}
            local output=${2:-"prism-context-export"}
            prism_context_export "$format" "$output"
            ;;
        update-templates)
            prism_context_update_templates
            ;;
        load-critical)
            prism_context_load_critical
            ;;
        *)
            log_error "Unknown context action: $action"
            log_info "Valid actions: add, query, export, update-templates, load-critical"
            return 1
            ;;
    esac
}

# Manage sessions
cmd_session() {
    local action=$1
    shift

    source "${PRISM_ROOT}/lib/prism-session.sh"

    case "$action" in
        start)
            local description=${1:-"Development session"}
            prism_session_start "$description"
            ;;
        status)
            prism_session_status
            ;;
        archive)
            prism_session_archive
            ;;
        restore)
            local session_id=$1
            if [[ -z "$session_id" ]]; then
                log_error "Please specify a session ID"
                log_info "Available sessions:"
                ls -1 .prism/sessions/archive/*.md 2>/dev/null | xargs -n1 basename | sed 's/.md$//' || echo "  (no archived sessions)"
                return 1
            fi
            prism_session_restore "$session_id"
            ;;
        export)
            local format=${1:-markdown}
            local session_id=${2:-current}
            prism_session_export "$format" "$session_id"
            ;;
        refresh)
            prism_session_refresh
            ;;
        clean)
            local days=${1:-30}
            prism_session_clean "$days"
            ;;
        *)
            log_error "Unknown session action: $action"
            log_info "Valid actions: start, status, archive, restore, export, refresh, clean"
            return 1
            ;;
    esac
}

# Manage configuration
cmd_config() {
    local action=$1
    shift

    source "${PRISM_ROOT}/lib/prism-config.sh"

    case "$action" in
        get)
            local key=$1
            if [[ -z "$key" ]]; then
                log_error "Please specify a configuration key"
                return 1
            fi
            prism_config_get "$key"
            ;;
        set)
            local key=$1
            local value=$2
            if [[ -z "$key" ]] || [[ -z "$value" ]]; then
                log_error "Usage: prism config set <key> <value>"
                return 1
            fi
            prism_config_set "$key" "$value"
            ;;
        list)
            prism_config_list
            ;;
        reset)
            prism_config_reset
            ;;
        *)
            log_error "Unknown config action: $action"
            log_info "Valid actions: get, set, list, reset"
            return 1
            ;;
    esac
}

# Update PRISM
cmd_update() {
    local check_only=false
    local force=false
    local beta=false

    # Parse options
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --check)
                check_only=true
                shift
                ;;
            --force)
                force=true
                shift
                ;;
            --beta)
                beta=true
                shift
                ;;
            *)
                log_error "Unknown option: $1"
                return 1
                ;;
        esac
    done

    source "${PRISM_ROOT}/lib/prism-update.sh"
    prism_update "$check_only" "$force" "$beta"
}

# Run diagnostics
cmd_doctor() {
    log_header "PRISM Doctor - System Diagnostics"

    source "${PRISM_ROOT}/lib/prism-doctor.sh"
    prism_doctor
}

# Show version
cmd_version() {
    echo "PRISM Framework v${PRISM_CLI_VERSION}"
    echo "Copyright (c) 2024 PRISM Contributors"
    echo "License: MIT"
    echo ""
    echo "Components:"
    echo "  Core Library: v${PRISM_VERSION}"
    echo "  Security Library: v${PRISM_VERSION}"
    echo "  Log Library: v${PRISM_VERSION}"
}

# Main command dispatcher
main() {
    # Parse global options - modifies $@ directly
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -v|--verbose)
                set_log_level "DEBUG"
                shift
                ;;
            -q|--quiet)
                set_log_level "ERROR"
                shift
                ;;
            --no-color)
                export NO_COLOR=1
                shift
                ;;
            --log-level)
                set_log_level "$2"
                shift 2
                ;;
            *)
                break
                ;;
        esac
    done

    # Get command
    local command=${1:-help}
    shift

    # Dispatch command
    case "$command" in
        init)
            cmd_init "$@"
            ;;
        context)
            cmd_context "$@"
            ;;
        session)
            cmd_session "$@"
            ;;
        config)
            cmd_config "$@"
            ;;
        update)
            cmd_update "$@"
            ;;
        doctor)
            cmd_doctor "$@"
            ;;
        version|--version|-v)
            cmd_version
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            log_error "Unknown command: $command"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Run main function
main "$@"