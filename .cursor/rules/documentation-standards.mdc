---
description: PRISM documentation standards for AI-generated code including context management, commit messages, and setup documentation
globs: ["**/*.js", "**/*.ts", "**/*.jsx", "**/*.tsx", "**/*.py", "**/*.java", "**/*.go", "**/*.php", "**/*.rb", "**/*.cs", "**/*.md", "**/*.mdx", "**/.prism/**/*", "**/prism-context.sh", "**/setup-new-project.sh"]
alwaysApply: true
---

# Documentation Standards

## Code-Level Documentation

### Comment Guidelines

**EXPLAIN** complex logic with strategic commenting:

- **FREQUENCY**: 1 comment per 3-5 lines of complex logic
- **PURPOSE**: Document why, not what - focus on decision rationale
- **CLARITY**: Use clear, concise language that explains intent
- **MAINTENANCE**: Keep comments updated with code changes

#### What to Document

```javascript
// Good: Explains the reasoning behind the implementation
// Using exponential backoff to handle rate limiting from external API
// Starting with 1 second delay, doubling on each retry up to 30 seconds
const retryWithBackoff = async (fn, maxRetries = 3) => {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await fn();
    } catch (error) {
      if (attempt === maxRetries) throw error;
      
      const delay = Math.min(1000 * Math.pow(2, attempt - 1), 30000);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
};
```

```javascript
// Bad: Comments that restate what the code does
// Increment counter by 1
counter++;

// Loop through array
for (let i = 0; i < items.length; i++) {
  // Process each item
  processItem(items[i]);
}
```

#### PRISM AI-Specific Documentation Requirements

**ANNOTATE** AI assumptions and limitations with PRISM context:

```python
def analyze_user_sentiment(text):
    """
    Analyzes user sentiment using AI-generated logic.
    
    AI-Generated: This function was generated using Claude Code v3.5
    PRISM Context: Decision logged in .prism/context/decisions.md
    Session: Tracked in .prism/sessions/current.md
    
    Assumptions: 
    - Input text is in English
    - Text length is under 10,000 characters
    - Basic sentiment analysis (positive/negative/neutral)
    
    Limitations:
    - May not handle sarcasm effectively
    - Context-dependent sentiments might be misclassified
    - No support for multilingual text
    
    Alternative approaches considered:
    - TextBlob library (rejected: insufficient accuracy)
    - VADER sentiment (rejected: not suitable for long text)
    - Custom trained model (rejected: resource constraints)
    
    PRISM Integration:
    - Log usage patterns: ./prism-context.sh add patterns.md MEDIUM "ml,sentiment" "[pattern details]"
    - Update domain knowledge: .prism/context/domain.md
    """
    # Implementation here...
```

### Function and Method Documentation

#### Documentation Requirements

**DOCUMENT** all public functions and methods:

```typescript
/**
 * Processes user payment with comprehensive validation and error handling.
 * 
 * @param {PaymentRequest} paymentData - Payment information including amount, currency, method
 * @param {User} user - User object with authentication and authorization details
 * @param {PaymentOptions} options - Optional configuration for payment processing
 * @returns {Promise<PaymentResult>} Promise resolving to payment confirmation or error details
 * 
 * @throws {ValidationError} When payment data fails validation
 * @throws {InsufficientFundsError} When user has insufficient funds
 * @throws {PaymentGatewayError} When external payment service fails
 * 
 * @example
 * ```typescript
 * const result = await processPayment(
 *   { amount: 100.00, currency: 'USD', method: 'credit_card' },
 *   currentUser,
 *   { enableNotifications: true }
 * );
 * ```
 * 
 * @since 2.1.0
 * @ai-generated Claude Code v3.5
 * @reviewed-by John Doe - 2024-01-15
 */
async function processPayment(paymentData: PaymentRequest, user: User, options?: PaymentOptions): Promise<PaymentResult> {
  // Implementation...
}
```

### API Documentation

#### Endpoint Documentation

**DOCUMENT** all API endpoints comprehensively:

```javascript
/**
 * @api {post} /api/v1/users Create New User
 * @apiName CreateUser
 * @apiGroup Users
 * @apiVersion 1.0.0
 * 
 * @apiDescription Creates a new user account with email verification.
 * AI-Generated endpoint with manual security review completed.
 * 
 * @apiParam {String} email User's email address (must be valid format)
 * @apiParam {String} password Password (min 8 chars, must contain uppercase, lowercase, number)
 * @apiParam {String} [firstName] User's first name (optional)
 * @apiParam {String} [lastName] User's last name (optional)
 * 
 * @apiSuccess (201) {String} id Unique user identifier
 * @apiSuccess (201) {String} email User's email address
 * @apiSuccess (201) {Boolean} emailVerified Email verification status
 * @apiSuccess (201) {String} createdAt Account creation timestamp
 * 
 * @apiError (400) ValidationError Invalid input data
 * @apiError (409) ConflictError Email already exists
 * @apiError (429) RateLimitError Too many registration attempts
 * @apiError (500) InternalError Server processing error
 * 
 * @apiExample {curl} Example Request:
 * curl -X POST \
 *   https://api.example.com/api/v1/users \
 *   -H 'Content-Type: application/json' \
 *   -d '{
 *     "email": "user@example.com",
 *     "password": "SecurePass123",
 *     "firstName": "John",
 *     "lastName": "Doe"
 *   }'
 * 
 * @apiSampleRequest /api/v1/users
 */
```

## Commit Message Standards

### PRISM AI-Assisted Development Commit Format

**USE** this standardized PRISM commit format for AI-generated code:

```
feat: Add user authentication with JWT tokens (AI-assisted)

- Generated with: Claude Code v3.5.0
- PRISM Session: [session_timestamp] - logged in .prism/sessions/history/
- Reviewed by: Jane Smith
- Modified: Added rate limiting and improved error messages
- Security review: Completed - no issues found
- Test coverage: 92% (exceeds 85% requirement)
- Context updated: .prism/context/decisions.md, .prism/context/patterns.md

PRISM Integration:
- Architecture: Follows patterns in .prism/context/architecture.md
- Decisions: JWT choice logged in .prism/context/decisions.md
- Security: Rules updated in .prism/references/security-rules.md
- Time: Synchronized via WebSearch at session start

AI-Tool: Claude Code
Prompt: "Create secure JWT-based authentication system with proper 
validation, rate limiting, and comprehensive error handling"

Closes #123
```

#### Commit Message Structure

```
<type>: <subject> (AI-assisted)

<body>
- Generated with: <AI tool and version>
- Reviewed by: <reviewer name>
- Modified: <specific changes made to AI output>
- Security review: <status>
- Test coverage: <percentage>

AI-Tool: <tool name>
Prompt: "<original prompt used>"

<footer>
```

### Commit Types

- **feat**: New feature implementation
- **fix**: Bug fix or issue resolution
- **docs**: Documentation updates
- **style**: Code style changes (formatting, etc.)
- **refactor**: Code restructuring without feature changes
- **perf**: Performance improvements
- **test**: Test additions or modifications
- **chore**: Build process or auxiliary tool changes

### Examples of Good Commit Messages

```
feat: Implement user profile management system (AI-assisted)

- Generated with: Claude Code v3.5.0
- Reviewed by: Mike Johnson  
- Modified: Added input validation and improved error handling
- Security review: Completed - all OWASP checks passed
- Test coverage: 89%

AI-Tool: Claude Code
Prompt: "Create complete user profile CRUD operations with validation, 
security checks, and comprehensive error handling"

Includes profile image upload, privacy settings, and audit logging.
Addresses requirements in PRD-2024-007.

Closes #156, #162
```

```
fix: Resolve memory leak in image processing pipeline (AI-assisted)

- Generated with: Claude Code v3.5.0
- Reviewed by: Sarah Connor
- Modified: Added proper resource cleanup and monitoring
- Performance impact: 40% reduction in memory usage
- Test coverage: 95%

AI-Tool: Claude Code  
Prompt: "Fix memory leak in image processing, ensure proper cleanup
and add monitoring for resource usage"

Fixes production issue causing OOM errors during peak usage.
Added comprehensive memory usage tests and monitoring.

Fixes #298
```

## PRISM Setup and Framework Documentation

### Project Setup Documentation

**MAINTAIN** setup documentation for PRISM framework:

#### Setup Script Documentation
```bash
# Document in project README or setup guide
## PRISM Framework Setup

### Automated Setup
```bash
# For new projects
./setup-new-project.sh /path/to/new/project

# For existing projects  
cp PRISM.md .
cp prism-context.sh .
chmod +x prism-context.sh
cp -r .prism .
./prism-context.sh init
```

### Manual Setup Steps
1. Copy framework files (PRISM.md, prism-context.sh, .prism/)
2. Initialize context system: `./prism-context.sh init`
3. Customize .prism/context/ files for your project
4. Verify setup: `./prism-context.sh status`
```

#### Framework Integration Guide
**DOCUMENT** PRISM integration in project documentation:

```markdown
## AI-Assisted Development with PRISM

### Session Management
- Time sync: Automatic WebSearch for UTC time on session start
- Context loading: Automatic loading from .prism/context/
- Session tracking: Active session logged in .prism/sessions/current.md
- Archive: Use `./prism-context.sh archive` between major tasks

### Context Commands
- Check status: `./prism-context.sh status`
- Add decisions: `./prism-context.sh add decisions.md CRITICAL "tag" "description"`
- Query context: `./prism-context.sh query "search term"`
- Export for team: `./prism-context.sh export`

### Framework Structure
- .prism/context/ - Persistent development context
- .prism/sessions/ - Session history and current state
- .prism/references/ - API contracts and specifications
```

## Architecture Decision Records (ADRs)

### PRISM AI-Assisted Architecture Decisions

**DOCUMENT** significant architectural decisions in both ADRs and PRISM context:

```markdown
# ADR-015: API Rate Limiting Implementation

## Status
Accepted

## Context
Need to implement rate limiting for public APIs to prevent abuse and ensure fair usage. AI assistance was used to evaluate different approaches and implement the solution.

## AI Assistance Details
- Tool: Claude Code v3.5.0
- Prompt: "Design and implement scalable API rate limiting system using Redis with sliding window algorithm"
- Generated: Initial implementation, test cases, and monitoring setup
- Review: Complete security and performance audit completed
- Modifications: Added custom error messages and improved Redis configuration

## Decision
Implement sliding window rate limiting using Redis with the following characteristics:
- Per-user and per-IP rate limits
- Configurable limits based on user tier
- Graceful degradation during Redis outages
- Comprehensive monitoring and alerting

## Consequences

### Positive
- Protects against API abuse
- Ensures fair resource allocation  
- Scalable across multiple instances
- Comprehensive monitoring

### Negative
- Additional Redis dependency
- Slight latency increase (~2ms per request)
- Requires Redis cluster for high availability

### Risks Mitigated
- DDoS attacks on API endpoints
- Resource exhaustion from excessive usage
- Unfair usage patterns affecting legitimate users

## Implementation Notes
- AI-generated base implementation required 15% modification
- Security review identified and resolved 2 potential issues
- Performance testing shows 99.5% success rate under load
- Test coverage: 94%

## Follow-up Actions
- [ ] Monitor Redis performance in production
- [ ] Review rate limits after 30 days of data
- [ ] Consider implementing rate limit bypass for trusted partners
```

## PRISM Documentation Maintenance

### Regular Review Process

**MAINTAIN** documentation quality through regular PRISM-integrated reviews:

- **DAILY**: Update `.prism/sessions/current.md` with session progress
- **WEEKLY**: Review and update code comments, archive sessions with `./prism-context.sh archive`
- **MONTHLY**: Audit API documentation, update `.prism/references/` files
- **QUARTERLY**: Review ADRs, update `.prism/context/architecture.md` and patterns
- **ANNUALLY**: Comprehensive documentation audit, export context with `./prism-context.sh export`

### PRISM Context File Maintenance

**KEEP CONTEXT FILES CURRENT**:

```bash
# Regular context maintenance commands
./prism-context.sh status              # Check system health
./prism-context.sh query "outdated"    # Find stale entries
./prism-context.sh prune 30            # Remove context older than 30 days
./prism-context.sh export              # Create team documentation
```

### PRISM Documentation Quality Checklist

Before finalizing any AI-generated code:

- [ ] Complex logic is properly commented with PRISM context references
- [ ] Function/method documentation is complete with AI attribution
- [ ] API endpoints are documented in `.prism/references/api-contracts.yaml`
- [ ] Commit messages follow PRISM format with context references
- [ ] AI assistance properly attributed with session tracking
- [ ] Security reviews documented in `.prism/references/security-rules.md`
- [ ] Test coverage noted and logged in session
- [ ] Alternative approaches mentioned and logged in context
- [ ] Assumptions and limitations clear with PRISM context
- [ ] PRISM context files updated: decisions.md, patterns.md, architecture.md
- [ ] Session archived: `./prism-context.sh archive` when complete
- [ ] Setup documentation includes PRISM framework instructions
- [ ] Time synchronization working (check `.prism/.time_sync`)