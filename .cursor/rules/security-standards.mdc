---
description: PRISM security standards for AI-generated code with OWASP Top 10 prevention and context-aware security
globs: ["**/*.js", "**/*.ts", "**/*.jsx", "**/*.tsx", "**/*.py", "**/*.java", "**/*.go", "**/*.php", "**/*.rb", "**/*.cs", "**/*.sql", "**/.prism/**/*", "**/prism-context.sh"]
alwaysApply: true
---

# Security Standards for AI-Generated Code

## Critical Security Requirements

⚠️ **PRISM SECURITY ALERT**: 45% of AI-generated code contains security vulnerabilities. Every security-related implementation MUST undergo manual review and be documented in `.prism/references/security-rules.md`.

### Input Validation & Sanitization

**VALIDATE** all user inputs with explicit sanitization:

- **SANITIZE** all user inputs before processing
- **VALIDATE** data types, formats, and ranges
- **ESCAPE** special characters in user-provided data
- **USE** parameterized queries for all database operations
- **IMPLEMENT** rate limiting for API endpoints
- **REJECT** malformed or suspicious inputs immediately

### Authentication & Authorization

**REVIEW** authentication and authorization logic manually:

- **VERIFY** proper session management implementation
- **ENSURE** secure password handling (hashing, salting)
- **IMPLEMENT** proper JWT token validation and expiry
- **USE** role-based access control (RBAC) consistently
- **ENFORCE** principle of least privilege
- **VALIDATE** user permissions for every protected resource

### OWASP Top 10 Prevention

**SCAN** for and prevent these common vulnerabilities:

#### 1. Injection Attacks
- **SQL Injection**: Always use parameterized queries
- **NoSQL Injection**: Validate and sanitize NoSQL query parameters
- **Command Injection**: Never execute user input directly as system commands
- **LDAP Injection**: Escape LDAP query parameters properly

#### 2. Broken Authentication
- **IMPLEMENT** strong session management
- **USE** secure authentication libraries
- **ENFORCE** multi-factor authentication where appropriate
- **AVOID** default credentials

#### 3. Sensitive Data Exposure
- **ENCRYPT** sensitive data at rest and in transit
- **USE** HTTPS/TLS for all communications
- **AVOID** logging sensitive information
- **IMPLEMENT** proper key management

#### 4. XML External Entities (XXE)
- **DISABLE** XML external entity processing
- **VALIDATE** and sanitize XML inputs
- **USE** secure XML parsers

#### 5. Broken Access Control
- **IMPLEMENT** proper authorization checks
- **VERIFY** user permissions before resource access
- **AVOID** insecure direct object references

#### 6. Security Misconfiguration
- **SECURE** default configurations
- **DISABLE** unnecessary services and features
- **KEEP** frameworks and dependencies updated

#### 7. Cross-Site Scripting (XSS)
- **ESCAPE** output data properly
- **VALIDATE** and sanitize all inputs
- **USE** Content Security Policy (CSP)
- **IMPLEMENT** proper context-aware encoding

#### 8. Insecure Deserialization
- **AVOID** deserializing untrusted data
- **VALIDATE** serialized data before processing
- **USE** safe serialization libraries

#### 9. Using Components with Known Vulnerabilities
- **AUDIT** dependencies regularly
- **UPDATE** libraries and frameworks promptly
- **MONITOR** security advisories

#### 10. Insufficient Logging & Monitoring
- **LOG** security events properly
- **MONITOR** for suspicious activities
- **IMPLEMENT** proper incident response

### Error Handling & Information Disclosure

**NEVER** expose sensitive data in error messages or logs:

- **GENERIC** error messages for users
- **DETAILED** error logs for developers (secure location)
- **AVOID** stack traces in production responses
- **SANITIZE** error messages before logging
- **IMPLEMENT** proper exception handling

### Data Protection

**PROTECT** sensitive data throughout its lifecycle:

- **ENCRYPT** passwords using bcrypt or similar
- **HASH** sensitive identifiers where appropriate
- **MASK** sensitive data in logs and debugging output
- **IMPLEMENT** data retention policies
- **SECURE** data transmission with proper TLS configuration

### PRISM Security Review Checklist

Before deploying any AI-generated security code:

- [ ] Manual code review by security-aware developer
- [ ] Security rules documented in `.prism/references/security-rules.md`
- [ ] Automated security scanning completed
- [ ] Input validation implemented and tested
- [ ] Authentication/authorization logic verified
- [ ] Error handling reviewed for information leaks
- [ ] Dependencies checked for known vulnerabilities
- [ ] Security tests written and passing
- [ ] Context logged: `./prism-context.sh add security-rules.md CRITICAL "security,review" "[security findings]"`
- [ ] Time-stamped security review logged in `.prism/sessions/current.md`

## Red Flags - When NOT to Use AI

**NEVER** use AI for (log these decisions in `.prism/context/decisions.md`):
- **Cryptographic implementations** - Use established libraries only
- **Financial calculations** requiring precision
- **Regulatory compliance code** - Requires legal review
- **Safety-critical systems** - Requires specialized expertise
- **PII handling** without immediate human review
- **Time-critical security functions** - Use PRISM time sync for accuracy

### PRISM Security Integration

**CONTEXT-AWARE SECURITY**:
- Load security rules from `.prism/references/security-rules.md` before implementation
- Update security patterns in `.prism/context/patterns.md` after security reviews
- Log all security decisions with: `./prism-context.sh add decisions.md CRITICAL "security" "[decision details]"`
- Archive security sessions: `./prism-context.sh archive` after critical security work