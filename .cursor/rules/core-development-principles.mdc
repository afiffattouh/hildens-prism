---
description: Core development principles for PRISM AI-assisted development with architecture-first approach
globs: ["**/*.js", "**/*.ts", "**/*.jsx", "**/*.tsx", "**/*.py", "**/*.java", "**/*.go", "**/*.php", "**/*.rb", "**/*.cs", "**/*.sh", "**/PRISM.md", "**/.prism/**/*"]
alwaysApply: true
---

# Core Development Principles

## PRISM Framework Integration

**LEVERAGE** the PRISM (Persistent Real-time Intelligent Security Management) framework:

- **CONTEXT MANAGEMENT**: Use `.prism/` directory for persistent knowledge across sessions
- **TIME SYNC**: Initialize sessions with WebSearch for accurate UTC time synchronization
- **SHELL INTEGRATION**: Utilize `prism-context.sh` commands for context management
- **PROGRESSIVE ENHANCEMENT**: Follow 6-phase development pattern (Basic → Secure → Optimize → Test → Refactor)

## Evidence-Based Development

**ALWAYS** validate AI suggestions against project requirements and PRISM context:

- **NEVER** accept AI-generated code without thorough review (45% vulnerability rate)
- **MEASURE** performance impacts before accepting optimizations  
- **DOCUMENT** all AI-assisted contributions in `.prism/context/decisions.md`
- **VERIFY** that code aligns with patterns in `.prism/context/patterns.md`

## Architecture-First Approach

**HUMANS DECIDE** what and why - AI implements how within PRISM context:

- **DEFINE** interfaces and data contracts in `.prism/references/api-contracts.yaml`
- **MAINTAIN** system architecture documentation in `.prism/context/architecture.md`
- **USE** reference implementations and patterns from `.prism/context/patterns.md`
- **ENSURE** new code follows decisions logged in `.prism/context/decisions.md`

## Implementation Guidelines

### Before Writing Code:
1. **SYNC TIME**: WebSearch "current UTC time" and update `.prism/.time_sync`
2. **LOAD CONTEXT**: Read `.prism/context/architecture.md` and relevant patterns
3. **CHECK DECISIONS**: Review `.prism/context/decisions.md` for existing choices
4. **VALIDATE DEPENDENCIES**: Verify `.prism/context/dependencies.md` alignment

### During Implementation:
- Follow established coding conventions consistently
- Maintain separation of concerns
- Use dependency injection where appropriate
- Implement proper error boundaries and handling

### After Implementation:
- **UPDATE CONTEXT**: Add decisions to `.prism/context/decisions.md`
- **DOCUMENT PATTERNS**: Update `.prism/context/patterns.md` with new patterns
- **LOG SESSION**: Update `.prism/sessions/current.md` with key activities
- **ARCHIVE WHEN COMPLETE**: Use `./prism-context.sh archive` to save session

## Code Quality Principles

- **PRIORITIZE** readability and maintainability over cleverness
- **AVOID** over-engineering simple problems
- **REFACTOR** generic AI solutions to match project-specific idioms
- **MAINTAIN** consistent naming conventions throughout the codebase
- **ENSURE** proper separation between business logic and infrastructure concerns

## Integration Standards

When integrating with existing systems:
- Respect existing interfaces and contracts
- Follow established data flow patterns
- Maintain consistency with existing error handling strategies
- Use existing utilities and helper functions where appropriate
- Avoid duplicating functionality that already exists in the codebase