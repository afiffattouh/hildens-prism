---
description: Emergency protocols for handling context corruption, quality degradation, and security incidents in AI-assisted development
globs: ["**/*"]
alwaysApply: true
---

# Emergency Protocols for AI-Assisted Development

## Context Corruption Response

### Detection Signs
**IMMEDIATE ATTENTION** required when you observe:

- **INCONSISTENT PATTERNS**: Generated code violates established conventions
- **REPETITIVE BEHAVIOR**: AI repeats same mistakes or suggestions
- **LOGICAL INCONSISTENCIES**: Code doesn't make sense or contradicts requirements
- **QUALITY DEGRADATION**: Sudden drop in code quality or best practices
- **PATTERN VIOLATIONS**: Departure from established architectural patterns
- **NONSENSICAL OUTPUT**: AI generates irrelevant or incorrect code

### Immediate Response Protocol

#### 1. Stop Generation Immediately
```
⚠️ STOP: Context corruption detected
- Halt current generation
- Do not commit corrupted code
- Save current work state
- Document corruption symptoms
```

#### 2. Context Recovery Process
**EXECUTE** this recovery sequence:

1. **SAVE WORK**: Preserve any valid code from current session
   ```bash
   # Create backup of current work
   git stash push -m "WIP: Before context reset - $(date)"
   ```

2. **CLEAR CONTEXT**: Restart session with clean context
   - Use `/clear` command or restart IDE
   - Close all unnecessary files and tabs
   - Clear conversation history if using chat interface

3. **ASSESS DAMAGE**: Review recent generations for issues
   - Check last 5-10 code generations
   - Identify when corruption began
   - Document problematic patterns observed

4. **RESET WITH CONSTRAINTS**: Restart with explicit constraints
   ```
   Fresh start required. Context: Senior developer working on [PROJECT].
   Architecture: [SPECIFIC STACK]
   Constraints: [EXPLICIT REQUIREMENTS]
   Quality: Production-ready code with comprehensive error handling
   ```

#### 3. Prevention Measures
**IMPLEMENT** to prevent future corruption:
- **FREQUENT RESETS**: Clear context every 30-45 minutes
- **FOCUSED SESSIONS**: Limit session scope to single feature/component
- **EXPLICIT CONSTRAINTS**: Always specify architecture and requirements
- **REGULAR VALIDATION**: Validate output against established patterns

## Quality Degradation Response

### Quality Degradation Indicators

**MONITOR** for these warning signs:

#### Code Quality Issues
- **COMPLEXITY INCREASE**: Cyclomatic complexity >10
- **PATTERN VIOLATIONS**: Departure from established patterns
- **POOR NAMING**: Generic or unclear variable/function names
- **MISSING ERROR HANDLING**: Lack of proper error management
- **SECURITY GAPS**: Missing input validation or security measures

#### Performance Issues
- **INEFFICIENT ALGORITHMS**: O(n²) when O(n) solutions exist
- **RESOURCE LEAKS**: Memory or connection leaks
- **BLOCKING OPERATIONS**: Synchronous operations that should be async
- **UNNECESSARY COMPLEXITY**: Over-engineered simple solutions

#### Architecture Issues
- **TIGHT COUPLING**: Components too dependent on each other
- **POOR SEPARATION**: Mixed concerns in single components
- **INCONSISTENT INTERFACES**: Varying API patterns
- **DEPENDENCY VIOLATIONS**: Circular or inappropriate dependencies

### Quality Recovery Protocol

#### 1. Immediate Assessment
```markdown
## Quality Degradation Assessment
- [ ] Identify affected code components
- [ ] Measure quality metrics (complexity, maintainability)
- [ ] Compare against baseline quality standards
- [ ] Document specific quality issues found
- [ ] Assess impact on system architecture
```

#### 2. Rollback Decision Matrix

| Quality Issue | Severity | Action Required |
|---------------|----------|-----------------|
| Critical security vulnerability | High | Immediate rollback |
| Performance degradation >50% | High | Immediate rollback |
| Architecture violation | Medium | Refactor in place |
| Minor pattern inconsistency | Low | Document and fix |
| Style guide violations | Low | Fix during refactoring |

#### 3. Recovery Actions

**FOR HIGH SEVERITY ISSUES**:
1. **IMMEDIATE ROLLBACK**: Revert to last known good state
   ```bash
   git reset --hard HEAD~n  # Where n is number of bad commits
   # Or restore from specific commit
   git checkout <last-good-commit-hash>
   ```

2. **RESTART GENERATION**: Begin with fresh context and explicit requirements
3. **ENHANCED REVIEW**: Implement additional quality gates
4. **DOCUMENTATION**: Record lessons learned and prevention measures

**FOR MEDIUM SEVERITY ISSUES**:
1. **REFACTOR IN PLACE**: Fix issues without rolling back
2. **ADD TESTS**: Ensure comprehensive test coverage
3. **CODE REVIEW**: Mandatory human review before merge
4. **MONITORING**: Add monitoring for similar issues

## Security Incident Response

### Security Incident Classification

#### Level 1: Critical Security Vulnerabilities
- **SQL INJECTION**: Unsanitized database queries
- **XSS VULNERABILITIES**: Unescaped user input in output
- **AUTHENTICATION BYPASS**: Broken auth logic
- **PRIVILEGE ESCALATION**: Unauthorized access elevation
- **DATA EXPOSURE**: Sensitive data in logs or responses

#### Level 2: Security Configuration Issues
- **WEAK ENCRYPTION**: Poor cryptographic choices
- **INSECURE DEFAULTS**: Unsafe default configurations  
- **MISSING VALIDATION**: Insufficient input validation
- **IMPROPER ERROR HANDLING**: Information disclosure in errors

#### Level 3: Security Best Practice Violations
- **MISSING RATE LIMITING**: No protection against abuse
- **INSUFFICIENT LOGGING**: Inadequate security event logging
- **WEAK PASSWORD POLICIES**: Poor password requirements
- **MISSING SECURITY HEADERS**: Absent security HTTP headers

### Security Response Protocol

#### Immediate Response (Level 1 Incidents)
```markdown
🚨 CRITICAL SECURITY INCIDENT DETECTED

IMMEDIATE ACTIONS:
1. [ ] STOP all deployments immediately
2. [ ] Isolate affected systems
3. [ ] Notify security team and project lead
4. [ ] Document vulnerability details
5. [ ] Begin incident response procedures
```

**SECURITY INCIDENT CHECKLIST**:
1. **IMMEDIATE CONTAINMENT**:
   - Stop affected services if in production
   - Prevent further deployment of vulnerable code
   - Alert security team immediately

2. **IMPACT ASSESSMENT**:
   - Identify all affected systems and components
   - Assess potential data exposure or system compromise
   - Document timeline and scope of vulnerability

3. **REMEDIATION**:
   - Fix vulnerability with security team oversight
   - Test fix thoroughly in isolated environment
   - Validate fix with security scanning tools

4. **VALIDATION**:
   - Security team approval required before deployment
   - Comprehensive testing of security fix
   - Monitoring implementation for similar issues

#### Security Review Requirements

**MANDATORY REVIEW** for all authentication-related code:
```python
# Example: Security review checklist for auth code
def review_auth_code():
    """
    Security review completed: [DATE]
    Reviewer: [NAME]
    
    Checks performed:
    ✓ Input validation implemented
    ✓ Password hashing using bcrypt
    ✓ JWT tokens properly validated
    ✓ Rate limiting in place
    ✓ Error messages don't leak information
    ✓ Session management secure
    ✓ CSRF protection enabled
    ✓ SQL injection prevention verified
    
    Vulnerabilities found: None
    Additional notes: All security requirements met
    """
    pass
```

## Recovery Documentation

### Incident Documentation Template

```markdown
# Incident Report: AI-Generated Code Issue

## Incident Summary
- **Date**: [DATE]
- **Time**: [TIME]
- **Severity**: [Critical/High/Medium/Low]
- **Type**: [Context Corruption/Quality Degradation/Security Incident]
- **Reporter**: [NAME]
- **Status**: [Resolved/In Progress/Investigating]

## Problem Description
[Detailed description of the issue encountered]

## Root Cause Analysis
- **AI Tool**: [Tool name and version]
- **Context State**: [Description of context when issue occurred]
- **Trigger**: [What caused the issue]
- **Contributing Factors**: [Additional factors that contributed]

## Impact Assessment
- **Systems Affected**: [List of affected systems/components]
- **Users Impacted**: [Number and type of users affected]
- **Business Impact**: [Description of business impact]
- **Duration**: [How long the issue persisted]

## Resolution Steps
1. [Step by step resolution process]
2. [Actions taken to fix the issue]
3. [Validation performed]
4. [Preventive measures implemented]

## Lessons Learned
- **What Worked Well**: [Positive aspects of response]
- **What Could Be Improved**: [Areas for improvement]
- **Prevention Measures**: [Steps to prevent recurrence]

## Follow-up Actions
- [ ] Update documentation
- [ ] Implement monitoring
- [ ] Train team on prevention
- [ ] Review and update protocols
```

### Post-Incident Review Process

#### Weekly Incident Reviews
- **ANALYZE**: Review all incidents from the past week
- **IDENTIFY**: Common patterns and root causes
- **UPDATE**: Emergency protocols based on learnings
- **TRAIN**: Team on new prevention measures

#### Monthly Protocol Updates
- **ASSESS**: Effectiveness of current protocols
- **BENCHMARK**: Compare against industry best practices
- **REFINE**: Emergency response procedures
- **COMMUNICATE**: Updates to entire development team

#### Quarterly Protocol Audits
- **COMPREHENSIVE REVIEW**: Full audit of all emergency protocols
- **STAKEHOLDER FEEDBACK**: Input from security, ops, and development teams
- **INDUSTRY UPDATES**: Incorporate latest security and quality standards
- **TRAINING UPDATES**: Refresh team training on protocols

## Emergency Contact Information

### Escalation Matrix
```
Level 1: Developer → Team Lead (15 minutes)
Level 2: Team Lead → Engineering Manager (30 minutes)  
Level 3: Engineering Manager → Security Team + CTO (1 hour)
```

### Emergency Response Team
- **Security Team**: [CONTACT INFO]
- **Engineering Management**: [CONTACT INFO]
- **DevOps/SRE Team**: [CONTACT INFO]
- **Product Management**: [CONTACT INFO]

### 24/7 Emergency Protocols
- **Security Incidents**: Immediate notification required
- **Production Issues**: Follow standard incident response
- **Data Breaches**: Legal and compliance team notification required